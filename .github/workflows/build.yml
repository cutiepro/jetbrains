name: build
on:
  # avoid duplicate checks being run e.g. dependabot pull requests)
  push:
    branches: [ main ]
  # trigger the workflow on any pull request
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  build:
    name: build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      - name: fetch sources
        uses: actions/checkout@v4

      - name: validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v3

      - name: set up Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      - name: set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      - name: export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pluginVerifierHomeDir=${{ github.workspace }}/.pluginVerifier" >> $GITHUB_OUTPUT
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: build plugin
        run: ./gradlew buildPlugin

      - name: prepare plugin artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content

          echo "filename=${FILENAME:0:-4}" >> $GITHUB_OUTPUT

      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  verify:
    name: verify
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      - name: maximize build space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      - name: fetch sources
        uses: actions/checkout@v4

      - name: set up Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      - name: set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      #      - name: set up plugin verifier IDEs cache
      #        uses: actions/cache@v4
      #        with:
      #          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
      #          key: plugin-verifier-${{ hashFiles('build/printProductsReleases.txt') }}

      - name: verify plugin
        run: ./gradlew verifyPlugin -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      - name: collect Plugin Verifier result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  releaseDraft:
    name: release draft
    if: github.event_name != 'pull_request'
    needs: [ build, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      - name: fetch sources
        uses: actions/checkout@v4

      - name: remove old release drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      - name: create release draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ needs.build.outputs.version }}" \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"
